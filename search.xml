<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《clean code》简记</title>
      <link href="/2023/01/08/%E3%80%8Aclean-code%E3%80%8B%E7%AE%80%E8%AE%B0/"/>
      <url>/2023/01/08/%E3%80%8Aclean-code%E3%80%8B%E7%AE%80%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="代码整洁之道"><a href="#代码整洁之道" class="headerlink" title="代码整洁之道"></a>代码整洁之道</h1><h2 id="1-名称"><a href="#1-名称" class="headerlink" title="1. 名称"></a>1. 名称</h2><ol><li>破窗理论，要保证每次合代码都比合之前更加clean，逐步进行重构。</li><li>起名字要尽可能直接地表达含义，采用有区分的准确的词汇而不是一些含义很宽泛的。</li><li>起名称避免思维映射，要直接熟悉。每个名词表达的含义要唯一，不可一会儿表达这个意思一会儿表达另一个意思。可以使用问题领域的专业词汇。</li><li>对于魔数要用常量进行定义。</li></ol><h2 id="2-函数"><a href="#2-函数" class="headerlink" title="2. 函数"></a>2. 函数</h2><ol><li>函数体要尽可能短小，每个函数遵守“只做一件事”的原则，对于分支判断过多的场景（if&#x2F;else, switch）的代码，可以考虑是否可以用策略模式实现。</li><li>注意控制单个函数的复杂度，可以利用圈复杂度检测工具来进行辅助。</li><li>函数名称要尽可能具有描述性，这比对这个函数添加注释要好很多。（而且注释会非常容易过时，腐坏）</li><li>函数参数要尽可能少，bool类型的参数警惕使用，返回值类型的参数要谨慎。</li><li>对于C++而言，如果满足const的条件要尽可能使用const，比如参数，函数。对于重写虚函数的要加override让编译器检查。</li><li>重复是邪恶的根源，要避免CV，如果发现要重复，说明有一些抽象的层次没有发现，需要利用语言的机制来去除这种重复<ul><li>抽象子类</li><li>抽象方法</li><li>多态</li><li>模板</li><li>类型擦除</li></ul></li><li>写代码一般不太可能一次写的就足够clean，可以先随心所欲地实现，然后再逐步地打磨它，分解函数，修改名称，消除重复，一次clean没什么人做得到。</li><li>写代码是一个讲故事的过程，就跟做presentation一样，可以多从读者的角度考虑，当别人第一次看到这份代码的时候，他们的感受是怎样的。</li></ol><h2 id="3-注释"><a href="#3-注释" class="headerlink" title="3. 注释"></a>3. 注释</h2><ol><li>注释是很容易腐朽过期的，而且陈旧的，提供错误信息的注释比没有注释更可怕。</li><li>要尽可能少用注释，想办法通过提升命名，扩展代码的抽象层次来提高可读性。</li><li>需要的好的注释：<ul><li>某些深奥的数据结构和算法等，可以添加一些注释进行说明。</li><li>对意图的解释。对于一些不太符合常规意图的操作，可以增加一些注释进行解释。</li><li>警示信息。某些代码的修改可能会导致其他比较远的模块的问题，但是又不太容易看出来。可以增加警示信息。（但出现这种情况是不是本身就表明了设计存在一些问题呢？）</li><li>TODO。可以做的一些优化但是现在没有做的，增加TODO注释给未来提示。</li></ul></li><li>坏注释：<ul><li>自言自语，毫无信息量，多余的注释。比如为了自动生成文档而增加的注释。</li><li>注释掉的代码。删除吧，需要的时候版本管理工具会让我们找回它。</li></ul></li></ol><h2 id="4-格式"><a href="#4-格式" class="headerlink" title="4. 格式"></a>4. 格式</h2><ol><li>整个团队要保持格式的一致性，C++可以使用一份公用的<code>.clang-format</code> ,code review之前可以做强制格式检查。</li><li>垂直距离<ul><li>函数内变量声明要尽可能靠近其使用的位置。</li><li>类成员要注意布局，按照相关性进行分类，在垂直分布上要能够体现出来，而不是全部揉成一坨。</li><li>相关函数要定义在一起。调用者要尽可能放到被调用者上面，而且两者距离不要太远。</li><li>概念相关的代码应该放到一起，相关性越强，彼此之间的距离就应该越近。</li></ul></li></ol><h2 id="5-边界"><a href="#5-边界" class="headerlink" title="5. 边界"></a>5. 边界</h2><ol><li>依赖的第三方库，操作系统接口等最后抽象出内部的接口，而不是直接讲起传播到整个系统内部。</li><li>对于依赖的其他模块还没有开发出来的代码，抽象出接口，然后依赖抽象，并自己实现一个mock的模块，之后再替换成真是的其他模块。如果抽象和真实的模块直接不是直接适配，可以使用Adapter模式进行处理。</li></ol><h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h2><ol><li>保持测试代码的整洁，测试代码和生产代码一样重要。<code>测试的主要目的之一就是通过实例起到文档的作用。</code></li><li>测试使得改动成为可能，将历史发现的bug通过测试进行维护。每次合代码都需要通过全部测试。</li><li>每个测试分为清晰的BUILD-OPERATE-CHECK模式。</li><li>测试应该遵循的标准：<ul><li>快速，支持频繁的运行</li><li>独立</li><li>可重复（一些不稳定的接口，比如获取当前时间，可以通过一些mock的方式进行处理）</li><li>自足验证，不应该通过看日志、手工比对两个文件的方式来确认测试是否通过。</li><li>及时。</li></ul></li><li>测试保证和增强了生产代码的可扩展性、可维护性、可复用性。测试代码腐坏，那么省长代码也会跟着腐坏。</li></ol><h2 id="7-跌进"><a href="#7-跌进" class="headerlink" title="7. 跌进"></a>7. 跌进</h2><ol><li>运行所有测试</li><li>不可重复</li><li>表达程序员意图。<code>能写出工作的代码只是第一步，后续还需要花足够的时间去打磨。</code></li><li>尽可能减少类和方法的数量</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> clean code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试博客</title>
      <link href="/2023/01/07/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/01/07/%E6%B5%8B%E8%AF%95%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="测试图片"><a href="#测试图片" class="headerlink" title="测试图片"></a>测试图片</h2><p><img src="/../imgs/clean-code/test.png"></p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> hello<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试公式"><a href="#测试公式" class="headerlink" title="测试公式"></a>测试公式</h2><p>$$ T &#x3D; \sum_{i&#x3D;1}^{N} i^2 $$</p>]]></content>
      
      
      <categories>
          
          <category> 测试博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
